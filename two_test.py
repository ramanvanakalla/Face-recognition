# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VhLrLKr9nRVHEWuddD7OXgbKREDT-aSs
"""

import warnings
warnings.filterwarnings('ignore')


import pandas as pd
import numpy as np
from PIL import Image

from keras.models import Sequential
from keras.layers import Dense
from keras.regularizers import L1L2

from keras.models import model_from_json

from keras.optimizers import SGD
from keras.optimizers import Adam

import matplotlib.pyplot as plt

import mtcnn
from mtcnn.mtcnn import MTCNN

detector=MTCNN()


from keras.models import load_model



model1 = load_model('facenet_keras.h5')




def find_faces(name,a,b):
  l=[]
  for i in range(a,b+1):
    print(i)
    n=len(str(i))
    img=Image.open(name+str(i)+".jpg")
    img = img.convert('RGB')
    img=np.asarray(img)
    results=detector.detect_faces(img)
    if(len(results)==0):
      l.append(face)
      labels[i-1][1]=labels[i-2][1]
      continue
    x=abs(results[0]['box'][0])
    y=abs(results[0]['box'][1])
    w=abs(results[0]['box'][2])
    h=abs(results[0]['box'][3])
    face=img[y:y+h,x:x+w]
    l.append(face)
  return l

def embeddings(faces_list):
  li=[]
  n=len(faces_list)
  for i in range(n):
    face=faces_list[i]
    face=Image.fromarray(face)
    samples=face.resize((160,160))
    samples =np.expand_dims(samples, axis=0)
    res=model1.predict(samples)
    li.append(res)
  return li

face1=find_faces("images/img_align_celeba/",1,1)
embed1=embeddings(face1)

face2=find_faces("images/img_align_celeba/",404,404)
embed2=embeddings(face1)


def prepareXY(X,Y):
  for i in range(99):
    for j in range(i+1,99):
      #print("i ",i)
      #print("j ",j)
      a=embed[i]
      b=embed[j]
      c=np.concatenate((a,b),axis=1)
      X.extend(c)
      d=np.concatenate((b,a),axis=1)
      X.extend(d)
      if(labels[1+i][1]==labels[1+j][1]):
        Y.append(1)
        Y.append(1)
      else:
        Y.append(0)
        Y.append(0)


X=np.concatenate((embed1,embed2),axis=1)

#prepareXY(X,Y)





# load json and create model
json_file = open('model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)
# load weights into new model
loaded_model.load_weights("my_model.h5")
print("Loaded model from disk")
 
# evaluate loaded model on test data
loaded_model.compile(loss='binary_crossentropy',optimizer=Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=1e-6, amsgrad=False),metrics=['acc'])

score = loaded_model.predict(np.array(X))

print(score)

#print("%s: %.2f%%" % (loaded_model.metrics_names[1], score[1]*100))